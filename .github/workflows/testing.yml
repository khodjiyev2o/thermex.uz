name: CI/CD
run-name: ${{ github.actor }} is testing the thermex.uz üöÄ
on:
  push:
jobs:
  testing:
      runs-on: ubuntu-latest
      container: python:3.9
      services:
        db:
          image: postgres
          env:
            POSTGRES_PASSWORD: password
            POSTGRES_USER: sammy
            POSTGRES_DB: postgres
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5

      steps:
        - name: Check out repository code
          uses: actions/checkout@v3
        - name: Cache dependencies
          uses: actions/cache@v2
          with:
            path: ~/.cache/pip
            key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/dev.txt') }}
        - name: Install dependencies
          run: pip install -r requirements/dev.txt
        - name: Install gettext
          run: apt-get update && apt-get install -y gettext
        - name: Create env file
          run: |
            echo "${{ secrets.ENV_FILE }}" >> .env
        - name: Compile messages
          run: python3 manage.py compilemessages
        - name: Run Tests
          run: python3 manage.py test
        - name: Run Linter
          run: make lint

  deploy:
    runs-on: ubuntu-latest
    needs: testing
    if: github.ref == 'refs/heads/main'
    steps:
        - name: Checkout code
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            rsync -az --exclude '.env' \
                  --exclude 'media/' \
                  -e "ssh -o StrictHostKeyChecking=no" \
                  . ec2-user@${{ secrets.EC2_INSTANCE_IP }}:~/thermex.uz/
        - name: SSH into server and deploy
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.EC2_INSTANCE_IP }}
            username: ec2-user
            key: ${{ secrets.SSH_PRIVATE_KEY }}
            script: |
              docker-compose down 
              docker container prune -f
              docker image prune -f
              docker-compose up -d --build
        - name: Job Status
          run: echo "üçè Deployment status is ${{ job.status }}."